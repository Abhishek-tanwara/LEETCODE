/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 /* The approach is that we first need to find its inorder sequence then we sort it 
 and return the second smallest element from that sequence but if no second element 
 is there then we return -1 */
class Solution {
public:
    vector<int>v;
    void inorder(TreeNode*root)
    {
        if(root==NULL)
            return;
        inorder(root->left);
        v.push_back(root->val);
        inorder(root->right);
    }
    int findSecondMinimumValue(TreeNode* root) {
        inorder(root);
        sort(v.begin(),v.end());
        int k=v[0];
        for(int i=1;i<v.size();i++)
        {
            if(v[i]!=k)
                return v[i];
        }
        return -1;
    }
};
